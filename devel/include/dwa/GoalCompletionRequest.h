// Generated by gencpp from file dwa/GoalCompletionRequest.msg
// DO NOT EDIT!


#ifndef DWA_MESSAGE_GOALCOMPLETIONREQUEST_H
#define DWA_MESSAGE_GOALCOMPLETIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dwa
{
template <class ContainerAllocator>
struct GoalCompletionRequest_
{
  typedef GoalCompletionRequest_<ContainerAllocator> Type;

  GoalCompletionRequest_()
    : bot_name()
    , goal_name()
    , total_time(0.0)
    , total_dist(0.0)
    , goal_success(false)  {
    }
  GoalCompletionRequest_(const ContainerAllocator& _alloc)
    : bot_name(_alloc)
    , goal_name(_alloc)
    , total_time(0.0)
    , total_dist(0.0)
    , goal_success(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bot_name_type;
  _bot_name_type bot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_name_type;
  _goal_name_type goal_name;

   typedef double _total_time_type;
  _total_time_type total_time;

   typedef double _total_dist_type;
  _total_dist_type total_dist;

   typedef uint8_t _goal_success_type;
  _goal_success_type goal_success;





  typedef boost::shared_ptr< ::dwa::GoalCompletionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dwa::GoalCompletionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoalCompletionRequest_

typedef ::dwa::GoalCompletionRequest_<std::allocator<void> > GoalCompletionRequest;

typedef boost::shared_ptr< ::dwa::GoalCompletionRequest > GoalCompletionRequestPtr;
typedef boost::shared_ptr< ::dwa::GoalCompletionRequest const> GoalCompletionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dwa::GoalCompletionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dwa::GoalCompletionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dwa

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dwa::GoalCompletionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dwa::GoalCompletionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dwa::GoalCompletionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dwa::GoalCompletionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dwa::GoalCompletionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dwa::GoalCompletionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dwa::GoalCompletionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "330c8dc5f852f64f1abe79cb5ccc6ddf";
  }

  static const char* value(const ::dwa::GoalCompletionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x330c8dc5f852f64fULL;
  static const uint64_t static_value2 = 0x1abe79cb5ccc6ddfULL;
};

template<class ContainerAllocator>
struct DataType< ::dwa::GoalCompletionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dwa/GoalCompletionRequest";
  }

  static const char* value(const ::dwa::GoalCompletionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dwa::GoalCompletionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string bot_name\n\
string goal_name\n\
float64 total_time\n\
float64 total_dist\n\
bool goal_success\n\
";
  }

  static const char* value(const ::dwa::GoalCompletionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dwa::GoalCompletionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bot_name);
      stream.next(m.goal_name);
      stream.next(m.total_time);
      stream.next(m.total_dist);
      stream.next(m.goal_success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalCompletionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dwa::GoalCompletionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dwa::GoalCompletionRequest_<ContainerAllocator>& v)
  {
    s << indent << "bot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bot_name);
    s << indent << "goal_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_name);
    s << indent << "total_time: ";
    Printer<double>::stream(s, indent + "  ", v.total_time);
    s << indent << "total_dist: ";
    Printer<double>::stream(s, indent + "  ", v.total_dist);
    s << indent << "goal_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DWA_MESSAGE_GOALCOMPLETIONREQUEST_H
