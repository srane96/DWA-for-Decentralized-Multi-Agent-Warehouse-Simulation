// Generated by gencpp from file warehouse_manager/Robot_Task_CompleteRequest.msg
// DO NOT EDIT!


#ifndef WAREHOUSE_MANAGER_MESSAGE_ROBOT_TASK_COMPLETEREQUEST_H
#define WAREHOUSE_MANAGER_MESSAGE_ROBOT_TASK_COMPLETEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace warehouse_manager
{
template <class ContainerAllocator>
struct Robot_Task_CompleteRequest_
{
  typedef Robot_Task_CompleteRequest_<ContainerAllocator> Type;

  Robot_Task_CompleteRequest_()
    : robot_name()
    , time_taken(0.0)
    , shortest_distance(0.0)  {
    }
  Robot_Task_CompleteRequest_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , time_taken(0.0)
    , shortest_distance(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef double _time_taken_type;
  _time_taken_type time_taken;

   typedef double _shortest_distance_type;
  _shortest_distance_type shortest_distance;





  typedef boost::shared_ptr< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Robot_Task_CompleteRequest_

typedef ::warehouse_manager::Robot_Task_CompleteRequest_<std::allocator<void> > Robot_Task_CompleteRequest;

typedef boost::shared_ptr< ::warehouse_manager::Robot_Task_CompleteRequest > Robot_Task_CompleteRequestPtr;
typedef boost::shared_ptr< ::warehouse_manager::Robot_Task_CompleteRequest const> Robot_Task_CompleteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace warehouse_manager

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'warehouse_manager': ['/home/siddhesh/warehouse_sim/warehouse_dwa_final/src/warehouse_manager/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d97d7930a530aa4c1ce9a0a5e1c268f1";
  }

  static const char* value(const ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd97d7930a530aa4cULL;
  static const uint64_t static_value2 = 0x1ce9a0a5e1c268f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "warehouse_manager/Robot_Task_CompleteRequest";
  }

  static const char* value(const ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_name\n\
float64 time_taken\n\
float64 shortest_distance\n\
";
  }

  static const char* value(const ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.time_taken);
      stream.next(m.shortest_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Robot_Task_CompleteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::warehouse_manager::Robot_Task_CompleteRequest_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "time_taken: ";
    Printer<double>::stream(s, indent + "  ", v.time_taken);
    s << indent << "shortest_distance: ";
    Printer<double>::stream(s, indent + "  ", v.shortest_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAREHOUSE_MANAGER_MESSAGE_ROBOT_TASK_COMPLETEREQUEST_H
